// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/victorfr4nca/go-crud/internal/entity"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Service) Create(_a0 *entity.Task) (*entity.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Task) (*entity.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Task) *entity.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Task) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with no fields
func (_m *Service) List() ([]*entity.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Service) Update(_a0 *entity.Task) (*entity.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Task) (*entity.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Task) *entity.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Task) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
